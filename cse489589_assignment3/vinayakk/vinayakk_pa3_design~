1. Update packet has been defined as a struct, which is enclosed in a helper class which has various methods to do basic operations on the packet structure fields. The struct is called Pkt and the helper class is called Packet, there is also another struct (UpdateField) which holds the updated fields. update_fields is an array of UpdateField and will be dynamically alloted space and added according to the no. of servers in the neighbourhood. When sending using UDP, the struct will be sent.

struct UpdateField
{
	uint16_t update_id;
	uint16_t cost;
	uint16_t update_port;
	uint32_t update_ip;
};

struct Pkt
{
	uint16_t fields_updated;
	uint16_t port;
	uint32_t ip;
	UpdateField* update_fields;
};

class Packet
{
	Pkt packet;
public:
	Packet();
	Packet(string ip, int port);
	Packet(string ip, int port, DistanceVector vector);
	Packet(Pkt packet);
	virtual ~Packet();
	Pkt get_packet();
	int get_sender_id();
	string get_sender_ip();
	int get_sender_port();
	void add_updated_fields(DistanceVector vector);
	DistanceVector get_distance_vector();
};

2. The routing table is being stored as follows: 
-Server class contains a map of id and class ServerDetails (ServerDetails contains the port, ip, distance vector, the no. of packets not received by timeout and whether its the neighbour of the server). 
-The distance vector of each server is stored in the instance of DistanceVector class in each ServerDetails class. 
-DistanceVector contains the next hop and the cost for every node.

map
   id1 - server1 details
   id2 - server2 details

server1 details
   port, ip, ..
   DistanceVector
      server1 - cost - next hop
      server2 - cost - next hop

3. Select pseudo code:
	while (true)
		read_fds = master;
		select(fdmax + 1, &read_fds, NULL, NULL, &timeout)  
		for (int i = 0; i <= fdmax; i++)
			if (FD_ISSET(i, &read_fds)) //see which decriptor is ready for reading
				if (i == listener_port)
					//function to receive distance vector updates and compute routing table
					receive_data(i);
				else if (i == 0)
					//function to execute Server commands
					command_execute(cmd);
				end
			end
		end
	end

4. The no. of timeouts for which no updates were received before its marked as server down (packet limit) is stored in the ServerDetails instance for the particular server.
-The time line is considered to be divided into many time durations of T which is the timeout for the server itself, at which it sends its distance vector updates to its neighbours.
-Once the servers timeout occurs and no updates were received from the neighbours then we decrement the packet limit for the particular host.
-When the limit goes to zero we mark the cost as Inf
-
